@model IEnumerable<stitalizator01.Models.Program>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string tvDateStr = "";
    /*
    if (Model.Count() == 0)
    {
        tvDateStr = DateTime.Now.ToString("yyyy-MM-dd");
    }
    else
    {
        tvDateStr = Model.First().TvDate.ToString("yyyy-MM-dd");
    }
     */
    tvDateStr = ViewBag.curDate;
}


@using (Html.BeginForm("Index", "Programs", FormMethod.Get))
{
    <fieldset>
        <h2 style="padding-left:20px">Программы на <input name="date" type="date" id="broadcast_datepicker" class="datepickers" required="required" value="@tvDateStr" onchange="form.submit();" /></h2>
    </fieldset>
}
<p>
    @Html.ActionLink("Добавить программу вручную", "Create")
</p>
<p>
    <span id="clearProgListButton" class="btn btn-danger btn-lg glyphicon glyphicon-trash" onclick="ClearProgs()"></span> Удалить ненужное
    @*Html.ActionLink("Удалить все ненужное", "Clear", new { date = tvDateStr })*@
</p>

<form id="schedDownloadForm">
    <label id="checkBoxesLabel">Каналы</label>
    <p>
        @Html.Action("ChannelCheckBoxes", "Channels")
    </p>
    <label>Время выхода программы</label>
    <div class="input-group input-group-lg">
        <span class="input-group-addon" id="sizing-addon1">С</span>
        <input id="progTimeFrom" type="text" class="form-control" aria-describedby="sizing-addon1" value="9:00">
    </div>    
    <div class="input-group input-group-lg">
        <span class="input-group-addon" id="sizing-addon2">По</span>
        <input id="progTimeTo" type="text" class="form-control" aria-describedby="sizing-addon1" value="23:00">
    </div>

    <p>        
            <span id=" updateproglistbutton" class="btn btn-info btn-lg glyphicon glyphicon-cloud-download" onclick="downloadSchedule()"></span> Подгрузить расписание        
    </p>
</form>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.IsBet)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ChannelCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProgTitle)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TvDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TimeStart)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TimeEnd)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProgDescr)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProgCat)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ShareStiPlus)
        </th>
@*
    <th>
        @Html.DisplayNameFor(model => model.ShareStiMob)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.ShareSti)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.ShareMos18)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.ShareRus18)
    </th>
*@
        <th></th>
    </tr>

@foreach (var model in Model) {
    @*<tr id="@item.ProgramID">*@
    <tr>
        <td>
        @using (Html.BeginForm("UpdateBet", "Programs", new { id = model.ProgramID}))
            {
            @Html.AntiForgeryToken()
            @*Html.CheckBoxFor(modelItem => item.IsBet, new { onclick = "this.form.submit();" })*@
            
            @Html.CheckBoxFor(modelItem => model.IsBet, new { onclick = "updateBet(" + model.ProgramID + ");" })
            
             @* <input type="submit" value="Update" />*@
        }
            @*
            <form method="post" action="Programs/UpdateBet">
                @Html.AntiForgeryToken()
                Html.CheckBoxFor(modelItem => item.IsBet, new { @Value = item.IsBet })
                @Html.CheckBoxFor(modelItem => item.IsBet)
                <input type="submit" value="Update" />
            </form>
    *@
            @*Html.EditorFor(modelItem => item.IsBet)
            @Html.CheckBoxFor(modelItem => item.IsBet, new { id=item.ProgramID, @class = "toggle", data_url = Url.Action("Edit", "Programs")})*@
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.ChannelCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.ProgTitle)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.TvDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.TimeStart)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.TimeEnd)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.ProgDescr)
        </td>
        <td>
            @Html.DisplayFor(modelItem => model.ProgCat)
        </td>
        <td>            
            @*@Html.DisplayFor(modelItem => item.ShareStiPlus)*@
            @using (Html.BeginForm("enterResult", "Programs", new { id = "resultForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.EditorFor(modelItem => model.ShareStiPlus, new { onchange = "form.submit();" })
                @Html.Hidden("ProgramID", model.ProgramID)
                @Html.Hidden("ChannelCode", model.ChannelCode)
                @Html.Hidden("ProgTitle", model.ProgTitle)
                @Html.Hidden("TvDate", model.TvDate)
                @Html.Hidden("TimeStart", model.TimeStart)
                @Html.Hidden("TimeEnd", model.TimeEnd)
                @Html.Hidden("ProgDescr", model.ProgDescr)
                @Html.Hidden("ProgCat", model.ProgCat)
                @Html.Hidden("ShareStiMob", model.ShareStiMob)
                @Html.Hidden("ShareSti", model.ShareSti)
                @Html.Hidden("ShareMos18", model.ShareMos18)
                @Html.Hidden("ShareRus18", model.ShareRus18)
                <input type="submit" value="Ok" class="btn btn-success btn-lg" />
                
                @*<button id="saveResultButton" value="Сохранить" class="btn btn-default" onclick="updateResult(e)" />*@
            }
        </td>
@*
    <td>
        @Html.DisplayFor(modelItem => item.ShareStiMob)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.ShareSti)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.ShareMos18)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.ShareRus18)
    </td>
*@
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = model.ProgramID }) |
            @Html.ActionLink("Details", "Details", new { id = model.ProgramID }) |
            @Html.ActionLink("Delete", "Delete", new { id = model.ProgramID })
        </td>
    </tr>
}

</table>


@section scripts {
    <script>

        function ClearProgs() {
            document.getElementById('overlayDiv').style.display = "block";
            var curDate = document.getElementById("broadcast_datepicker").value.toString("yyyy-MM-dd");
            $.ajax({
                url: '@Url.Action("Clear", "Programs")',
                type: "GET",
                dataType: "text",
                data: {
                    date: curDate
                },
                success: function (data) { console.log(data); location.reload(); }//document.write(data); }
            });
        };

        function downloadSchedule() {
            document.getElementById('overlayDiv').style.display = "block";



        var timeFromStr = document.getElementById("progTimeFrom").value;
        if (timeFromStr.indexOf(":") > 0) {
            timeFromStr = timeFromStr.substr(0, timeFromStr.indexOf(":"));
        }
        var timeToStr = document.getElementById("progTimeTo").value;
        if (timeToStr.indexOf(":") > 0) {
            timeToStr = timeToStr.substr(0, timeToStr.indexOf(":"));
        }
        var timeFilter = timeFromStr + "-" + timeToStr;
        var curDate = document.getElementById("broadcast_datepicker").value.toString("yyyy-MM-dd");
        var cbs = document.getElementsByClassName("channelCb");
        var chList = "";
        for (i = 0; i < cbs.length; i++) {
            if (cbs[i].checked) {
                chList += cbs[i].id;
                if (i != cbs.length - 1) {
                    chList += ";";
                }
            }
        }

        console.log(chList);
        //console.log(curDate);
        //console.log(document.getElementById("progTimeFrom").value + "-" + document.getElementById("progTimeTo").value);
        //console.log(timeFromStr+ "-" + timeToStr);


        
            $.ajax({
                url: '@Url.Action("ProgsByDate", "Programs")',
                type: "GET",
                dataType: "text",
                data: {
                    date: curDate,
                    channelsListStr: chList,
                    filter: timeFilter
                },
                success: function (data) { console.log(data); location.reload(); }//document.write(data); }
        });

    };


    function updateResult() {
        console.log("here we are");
        var formData = new FormData(this);

        $.ajax({
            url: '@Url.Action("enterResult", "Programs")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                console.log("success!");
                console.log("result: " + result);// here in result you will get your data
                //       e.preventDefault();
            },
            error: function (result) {
                console.log("error: " + result.error);
                console.log("result: " + result);
            }
        });
        //e.preventDefault();
    };



    function updateBet(curId) {
        //console.log("initial: " + curId);
        $.ajax({
            url: 'Programs/UpdateBet',
            type: 'POST',
            data: { id: curId },
            success: function (msg) {
                // console.log(msg);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest.responseText);
            }
        });
    }

    </script>
}